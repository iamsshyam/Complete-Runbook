apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template: 
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
        - name: trade-validation-service
          image: nexus.example.com/trade-validation-service:{{ .Values.imageTag }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-config
                  key: SPRING_PROFILES_ACTIVE
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-config
                  key: LOG_LEVEL
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: DB_USER
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: DB_PASS
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: JWT_SECRET
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-config
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-trade-validation
  labels:
    app: trade-validation
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: trade-validation
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: trade-validation
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: trade-validation-container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: 8080
